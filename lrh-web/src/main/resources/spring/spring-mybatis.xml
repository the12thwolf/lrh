<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 配置数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${mysql.jdbc.driver}" />
        <property name="url" value="${mysql.jdbc.url}" />
        <property name="username" value="${mysql.jdbc.username}" />
        <property name="password" value="${mysql.jdbc.password}" />
    </bean>

    <context:annotation-config/>
    <!--其实component-scan 就有了annotation-config的功能即把需要的类注册到了spring容器中 -->

    <!-- 在使用mybatis时 spring使用sqlsessionFactoryBean 来管理mybatis的sqlsessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- mybatis配置文件路径 -->
        <property name="configLocation" value="" />
        <!-- 实体类映射文件路径,这里只有一个就写死了，多个可以使用mybatis/*.xml来替代 -->
        <property name="mapperLocations" value="classpath:mybatis/*.xml" />
    </bean>

    <bean id="sst" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0">
            <ref bean="sqlSessionFactory" />
        </constructor-arg>
    </bean>

    <!--事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 使用全注释事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />



    <!--注意如果是多数据源则一定要使用sqlSessionFactoryBeanName 或sqlSessionTemplateBeanName
    来指定具体的数据源，不知道在上面的配置中有没有注意到，如果使用sqlSessionTemplateBeanName 的话要

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0">
            <ref bean="sqlSessionFactory" />
        </constructor-arg>
    </bean>
    来创建具体的实例并赋值给sqlSessionTemplateBeanName 这个属性-->


    <!--动态代理实现 不用写dao的实现
    <bean id="MapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        &lt;!&ndash; 这里的basePackage 指定了dao层接口路劲，这里的dao接口不用自己实现 &ndash;&gt;
        <property name="basePackage" value="com.zzbank.dao" />
        &lt;!&ndash; 如果只有一个数据源的话可以不用指定，但是如果有多个数据源的话必须要指定 &ndash;&gt;
        &lt;!&ndash; <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> &ndash;&gt;
        &lt;!&ndash;直接制定了sqlsessionTemplate名称，这个和上面的其实是一样的 &ndash;&gt;
        <property name="sqlSessionTemplateBeanName" value="sqlSession" />
    </bean>-->


</beans>







